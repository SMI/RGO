// <auto-generated />
using System;
using FAnsi.Discovery.TypeTranslation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RGO.DataAccess.Data;
using TypeGuesser;

#nullable disable

namespace RGO.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240424130218_restart")]
    partial class restart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
            TypeTranslater dbTranslator = DatabaseHelper.Instance.GetTypeTranslator();
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Doi")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("EvidenceDetails")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("Evidence_TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("StandardAcknowledgement")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("Evidence_TypeId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("RGO.Models.Evidence_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(string), 50)));

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("Evidence_Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4035),
                            Description = "",
                            Name = "Peer Reviewed Publication"
                        },
                        new
                        {
                            Id = 2,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4043),
                            Description = "",
                            Name = "Requested by another Research Project"
                        });
                });

            modelBuilder.Entity("RGO.Models.Group_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("Group_Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(3860),
                            Name = "Research Group"
                        },
                        new
                        {
                            Id = 2,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(3863),
                            Name = "Data Team"
                        });
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<int>("Group_TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Reference_number")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("Group_TypeId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4010),
                            Group_TypeId = 1,
                            Name = "Classification of Brain Images"
                        });
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Column_Value")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<int>("IsIdentifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int?>("PK_Column_Order")
                        .HasColumnType("int");

                    b.Property<string>("Potentially_Disclosive")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGO_Column_TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("RGO_RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("RGO_Column_TemplateId");

                    b.HasIndex("RGO_RecordId");

                    b.ToTable("RGO_Columns");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("IsIdentifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int?>("PK_Column_Order")
                        .HasColumnType("int");

                    b.Property<string>("Potentially_Disclosive")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGO_Dataset_TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("RGO_Dataset_TemplateId");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Column_Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4201),
                            Description = "Identifier of this image",
                            IsIdentifier = 0,
                            Name = "Image_Identifier",
                            PK_Column_Order = 1,
                            Potentially_Disclosive = "N",
                            RGO_Dataset_TemplateId = 1,
                            Release_Status_Id = 1,
                            Type = "Int"
                        },
                        new
                        {
                            Id = 2,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4205),
                            Description = "The first ground truther's label",
                            IsIdentifier = 0,
                            Name = "MRI_Classification_Ground_Truther_1",
                            Potentially_Disclosive = "N",
                            RGO_Dataset_TemplateId = 1,
                            Release_Status_Id = 1,
                            Type = "Char"
                        },
                        new
                        {
                            Id = 3,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4207),
                            Description = "The second ground truther's label",
                            IsIdentifier = 0,
                            Name = "MRI_Classification_Ground_Truther_2",
                            Potentially_Disclosive = "N",
                            RGO_Dataset_TemplateId = 1,
                            Release_Status_Id = 1,
                            Type = "Char"
                        },
                        new
                        {
                            Id = 4,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4209),
                            Description = "This holds labels where both ground truthers agreed",
                            IsIdentifier = 0,
                            Name = "MRI_Classification_Consensus",
                            Potentially_Disclosive = "N",
                            RGO_Dataset_TemplateId = 1,
                            Release_Status_Id = 1,
                            Type = "Char"
                        });
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Dataset_Name")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Dataset_Status")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Doi")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGO_Dataset_TemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("RGO_ReIdentificationConfigurationId")
                        .HasColumnType("int");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("int");

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("RGO_Dataset_TemplateId");

                    b.HasIndex("RGO_ReIdentificationConfigurationId");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Datasets");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGOutput_Id")
                        .HasColumnType("int");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("int");

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("RGOutput_Id");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Dataset_Templates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4177),
                            Description = "Classifying the type of Brain Scans, done by Gerry and Grant",
                            Name = "MRI Classification Ground Truth Template",
                            RGOutput_Id = 1,
                            Release_Status_Id = 1
                        });
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_ReIdentificationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("DatabaseType")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("DeIdentifiedColumn")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("IdentityColumn")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.HasKey("Id");

                    b.ToTable("RGO_ReIdentification_Configurations");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGO_DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("Record_Status")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("RGO_DatasetId");

                    b.ToTable("RGO_Records");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record_Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Person_Record_Role")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGO_Column_TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("RGO_RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RGO_Column_TemplateId");

                    b.HasIndex("RGO_RecordId");

                    b.ToTable("RGO_Record_People");
                });

            modelBuilder.Entity("RGO.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("OrcId")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4068),
                            Name = "Gerry Thomson",
                            Notes = "Academic Neuroradiologist",
                            OrcId = "123ABC"
                        },
                        new
                        {
                            Id = 2,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4070),
                            Name = "Grant Mair",
                            Notes = "Senior Clinical Lecturer in Neuroradiology",
                            OrcId = "456DEF"
                        },
                        new
                        {
                            Id = 3,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4072),
                            Name = "Smarti Reel",
                            Notes = "Postdoctoral Researcher",
                            OrcId = ""
                        },
                        new
                        {
                            Id = 4,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4074),
                            Name = "Kara Moraw",
                            Notes = "EPCC Applications Developer",
                            OrcId = ""
                        });
                });

            modelBuilder.Entity("RGO.Models.RGO_Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<int>("Evidence_Id")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("RGOutput_Id")
                        .HasColumnType("int");

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("Evidence_Id");

                    b.HasIndex("RGOutput_Id");

                    b.ToTable("RGO_Evidences");
                });

            modelBuilder.Entity("RGO.Models.RGO_Release_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Available_For_Release")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(string), 3)));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(string), 20)));

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("RGO_Release_Statii");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available_For_Release = "N",
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4232),
                            Description = "See Notes for reasons",
                            Name = "Held"
                        },
                        new
                        {
                            Id = 2,
                            Available_For_Release = "Y",
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4235),
                            Description = "Available for other researchers",
                            Name = "Released"
                        });
                });

            modelBuilder.Entity("RGO.Models.RGO_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(string), 20)));

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("RGO_Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4107),
                            Description = "Annotations that have been manually created or validated by a human expert",
                            Name = "Ground Truth"
                        });
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Description")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Doi")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Notes")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<int>("Originating_GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RGO_TypeId")
                        .HasColumnType("int");

                    b.Property<string>("StandardAcknowledgement")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType( dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.HasIndex("Originating_GroupId");

                    b.HasIndex("RGO_TypeId");

                    b.ToTable("RGOutputs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 4, 24, 13, 2, 17, 373, DateTimeKind.Utc).AddTicks(4143),
                            Description = "Brain Scan Classifications",
                            Name = "MRI Classification Ground Truth",
                            Originating_GroupId = 1,
                            RGO_TypeId = 1
                        });
                });

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.HasOne("RGO.Models.Evidence_Type", "Evidence_Type")
                        .WithMany("Evidence")
                        .HasForeignKey("Evidence_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evidence_Type");
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.HasOne("RGO.Models.Group_Type", "Group_Type")
                        .WithMany("Group")
                        .HasForeignKey("Group_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group_Type");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Column_Template", "RGO_Column_Template")
                        .WithMany("RGO_Column")
                        .HasForeignKey("RGO_Column_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Record", "RGO_Record")
                        .WithMany()
                        .HasForeignKey("RGO_RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset_Template", "RGO_Dataset_Template")
                        .WithMany("RGO_Column_Template")
                        .HasForeignKey("RGO_Dataset_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Column_Template")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_Release_Status");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset_Template", "RGO_Dataset_Template")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("RGO_Dataset_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_ReIdentificationConfiguration", "RGO_ReIdentificationConfiguration")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("RGO_ReIdentificationConfigurationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_ReIdentificationConfiguration");

                    b.Navigation("RGO_Release_Status");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.HasOne("RGO.Models.RGOutput", "RGOutput")
                        .WithMany("RGO_Dataset_Template")
                        .HasForeignKey("RGOutput_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Dataset_Template")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Release_Status");

                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset", "RGO_Dataset")
                        .WithMany("RGO_Record")
                        .HasForeignKey("RGO_DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record_Person", b =>
                {
                    b.HasOne("RGO.Models.Person", "Person")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Column_Template", "RGO_Column_Template")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("RGO_Column_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Record", "RGO_Record")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("RGO_RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.RGO_Evidence", b =>
                {
                    b.HasOne("RGO.Models.Evidence", "Evidence")
                        .WithMany("RGO_Evidence")
                        .HasForeignKey("Evidence_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGOutput", "RGOutput")
                        .WithMany("RGO_Evidence")
                        .HasForeignKey("RGOutput_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evidence");

                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.HasOne("RGO.Models.Models.Group", "Group")
                        .WithMany("RGOutput")
                        .HasForeignKey("Originating_GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Type", "RGO_Type")
                        .WithMany("RGOutput")
                        .HasForeignKey("RGO_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("RGO_Type");
                });

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.Navigation("RGO_Evidence");
                });

            modelBuilder.Entity("RGO.Models.Evidence_Type", b =>
                {
                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("RGO.Models.Group_Type", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.Navigation("RGO_Column");

                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_ReIdentificationConfiguration", b =>
                {
                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.Person", b =>
                {
                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.RGO_Release_Status", b =>
                {
                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Dataset");

                    b.Navigation("RGO_Dataset_Template");
                });

            modelBuilder.Entity("RGO.Models.RGO_Type", b =>
                {
                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_Evidence");
                });
#pragma warning restore 612, 618
        }
    }
}
