// <auto-generated />
using System;
using FAnsi.Discovery.TypeTranslation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RGO.DataAccess.Data;
using RGO.Utility;
using TypeGuesser;

#nullable disable

namespace RGO.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
            TypeTranslater dbTranslator = DatabaseHelper.Instance.GetTypeTranslator();

            modelBuilder.Entity("RGO.Models.Group_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .IsRequired()
                        .HasColumnType(dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(string),20)));

                    b.Property<string>("Notes")
                        .HasColumnType(dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<string>("Updated_By")
                        .HasColumnType(dbTranslator.GetStringDataTypeWithUnlimitedWidth());

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType(dbTranslator.GetSQLDBTypeForCSharpType(new DatabaseTypeRequest(typeof(DateTime))));

                    b.HasKey("Id");

                    b.ToTable("Group_Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 1, 23, 16, 58, 2, 404, DateTimeKind.Local).AddTicks(3116),
                            Name = "Research Group"
                        },
                        new
                        {
                            Id = 2,
                            Created_By = "seed",
                            Created_Date = new DateTime(2024, 1, 23, 16, 58, 2, 404, DateTimeKind.Local).AddTicks(3190),
                            Name = "Data Team"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
