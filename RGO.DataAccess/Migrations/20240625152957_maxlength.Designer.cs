// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RGO.DataAccess.Data;

#nullable disable

namespace RGO.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240625152957_maxlength")]
    partial class maxlength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.Property<string>("EvidenceDetails")
                        .HasColumnType("text");

                    b.Property<int>("Evidence_TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Evidence_TypeId");

                    b.ToTable("Evidences");
                });

            modelBuilder.Entity("RGO.Models.Evidence_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Evidence_Types");
                });

            modelBuilder.Entity("RGO.Models.Group_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Group_Types");
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Group_TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Reference_number")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Group_TypeId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Column_Value")
                        .HasColumnType("text");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IsIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("PK_Column_Order")
                        .HasColumnType("integer");

                    b.Property<string>("Potentially_Disclosive")
                        .HasColumnType("text");

                    b.Property<int>("RGO_Column_TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("RGO_RecordId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RGO_Column_TemplateId");

                    b.HasIndex("RGO_RecordId");

                    b.ToTable("RGO_Columns");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("PK_Column_Order")
                        .HasColumnType("integer");

                    b.Property<string>("Potentially_Disclosive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RGO_Dataset_TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RGO_Dataset_TemplateId");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Column_Templates");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Dataset_Name")
                        .HasColumnType("text");

                    b.Property<string>("Dataset_Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RGO_Dataset_TemplateId")
                        .HasColumnType("integer");

                    b.Property<int?>("RGO_ReIdentificationConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RGO_Dataset_TemplateId");

                    b.HasIndex("RGO_ReIdentificationConfigurationId");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Datasets");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RGOutput_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Release_Status_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RGOutput_Id");

                    b.HasIndex("Release_Status_Id");

                    b.ToTable("RGO_Dataset_Templates");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_ReIdentificationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DatabaseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeIdentifiedColumn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityColumn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RGO_ReIdentification_Configurations");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RGO_DatasetId")
                        .HasColumnType("integer");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RGO_DatasetId");

                    b.ToTable("RGO_Records");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record_Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Person_Record_Role")
                        .HasColumnType("text");

                    b.Property<int>("RGO_Column_TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("RGO_RecordId")
                        .HasColumnType("integer");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RGO_Column_TemplateId");

                    b.HasIndex("RGO_RecordId");

                    b.ToTable("RGO_Record_People");
                });

            modelBuilder.Entity("RGO.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrcId")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("RGO.Models.RGO_Evidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Evidence_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RGOutput_Id")
                        .HasColumnType("integer");

                    b.Property<string>("StandardAcknowledgement")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Evidence_Id");

                    b.HasIndex("RGOutput_Id");

                    b.ToTable("RGO_Evidences");
                });

            modelBuilder.Entity("RGO.Models.RGO_Release_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Available_For_Release")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("RGO_Release_Statuses");
                });

            modelBuilder.Entity("RGO.Models.RGO_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("RGO_Types");
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Created_By")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Originating_GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("RGO_TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("StandardAcknowledgement")
                        .HasColumnType("text");

                    b.Property<string>("Updated_By")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Originating_GroupId");

                    b.HasIndex("RGO_TypeId");

                    b.ToTable("RGOutputs");
                });

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.HasOne("RGO.Models.Evidence_Type", "Evidence_Type")
                        .WithMany("Evidence")
                        .HasForeignKey("Evidence_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evidence_Type");
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.HasOne("RGO.Models.Group_Type", "Group_Type")
                        .WithMany("Group")
                        .HasForeignKey("Group_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group_Type");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Column_Template", "RGO_Column_Template")
                        .WithMany("RGO_Column")
                        .HasForeignKey("RGO_Column_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Record", "RGO_Record")
                        .WithMany()
                        .HasForeignKey("RGO_RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset_Template", "RGO_Dataset_Template")
                        .WithMany("RGO_Column_Template")
                        .HasForeignKey("RGO_Dataset_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Column_Template")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_Release_Status");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset_Template", "RGO_Dataset_Template")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("RGO_Dataset_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_ReIdentificationConfiguration", "RGO_ReIdentificationConfiguration")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("RGO_ReIdentificationConfigurationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Dataset")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_ReIdentificationConfiguration");

                    b.Navigation("RGO_Release_Status");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.HasOne("RGO.Models.RGOutput", "RGOutput")
                        .WithMany("RGO_Dataset_Template")
                        .HasForeignKey("RGOutput_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Release_Status", "RGO_Release_Status")
                        .WithMany("RGO_Dataset_Template")
                        .HasForeignKey("Release_Status_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RGO_Release_Status");

                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.HasOne("RGO.Models.Models.RGO_Dataset", "RGO_Dataset")
                        .WithMany("RGO_Record")
                        .HasForeignKey("RGO_DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record_Person", b =>
                {
                    b.HasOne("RGO.Models.Person", "Person")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Column_Template", "RGO_Column_Template")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("RGO_Column_TemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.Models.RGO_Record", "RGO_Record")
                        .WithMany("RGO_Record_Person")
                        .HasForeignKey("RGO_RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.RGO_Evidence", b =>
                {
                    b.HasOne("RGO.Models.Evidence", "Evidence")
                        .WithMany("RGO_Evidence")
                        .HasForeignKey("Evidence_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGOutput", "RGOutput")
                        .WithMany("RGO_Evidence")
                        .HasForeignKey("RGOutput_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Evidence");

                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.HasOne("RGO.Models.Models.Group", "Group")
                        .WithMany("RGOutput")
                        .HasForeignKey("Originating_GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RGO.Models.RGO_Type", "RGO_Type")
                        .WithMany("RGOutput")
                        .HasForeignKey("RGO_TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("RGO_Type");
                });

            modelBuilder.Entity("RGO.Models.Evidence", b =>
                {
                    b.Navigation("RGO_Evidence");
                });

            modelBuilder.Entity("RGO.Models.Evidence_Type", b =>
                {
                    b.Navigation("Evidence");
                });

            modelBuilder.Entity("RGO.Models.Group_Type", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("RGO.Models.Models.Group", b =>
                {
                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Column_Template", b =>
                {
                    b.Navigation("RGO_Column");

                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset", b =>
                {
                    b.Navigation("RGO_Record");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Dataset_Template", b =>
                {
                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_ReIdentificationConfiguration", b =>
                {
                    b.Navigation("RGO_Dataset");
                });

            modelBuilder.Entity("RGO.Models.Models.RGO_Record", b =>
                {
                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.Person", b =>
                {
                    b.Navigation("RGO_Record_Person");
                });

            modelBuilder.Entity("RGO.Models.RGO_Release_Status", b =>
                {
                    b.Navigation("RGO_Column_Template");

                    b.Navigation("RGO_Dataset");

                    b.Navigation("RGO_Dataset_Template");
                });

            modelBuilder.Entity("RGO.Models.RGO_Type", b =>
                {
                    b.Navigation("RGOutput");
                });

            modelBuilder.Entity("RGO.Models.RGOutput", b =>
                {
                    b.Navigation("RGO_Dataset_Template");

                    b.Navigation("RGO_Evidence");
                });
#pragma warning restore 612, 618
        }
    }
}
